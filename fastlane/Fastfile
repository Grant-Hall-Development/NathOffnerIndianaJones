# fastlane/Fastfile
keychain_name = "temporary_keychain"
keychain_password = SecureRandom.base64

platform :android do
  desc "Upload a new Android version to the Google Play Store"
  lane :internal do
    upload_to_play_store(track: 'internal',release_status: 'completed',aab: "#{ENV['ANDROID_BUILD_FILE_PATH']}")
  end
  #lane :alpha do
  #  upload_to_play_store(track: 'alpha',release_status: 'completed',aab: "#{ENV['ANDROID_BUILD_FILE_PATH']}")
  #end
end

platform :ios do

  desc "Deliver a new Release build to the App Store"
  lane :release do
    build
    upload_to_app_store
  end

  desc "Deliver a new Beta build to Apple TestFlight"
  lane :beta do
    # Missing Export Compliance can also be set through Deliverfile
    update_info_plist(
      xcodeproj: "#{ENV['IOS_BUILD_PATH']}/iOS/Unity-iPhone.xcodeproj",
      plist_path: 'Info.plist',
      block: proc do |plist|
        plist['ITSAppUsesNonExemptEncryption'] = false
      end
    )
    build
    upload_to_testflight(skip_waiting_for_build_processing: true)
  end

  desc "Create .ipa"
  lane :build do
    setup_ci
    api_key = app_store_connect_api_key(
      key_id: ENV['APPSTORE_KEY_ID'],
      issuer_id: ENV['APPSTORE_ISSUER_ID'],
      key_content: ENV["APPSTORE_P8"]
    )
    
    match(
      type: 'appstore',
      storage_mode: 'git',
      git_url: ENV['MATCH_URL'],
      git_basic_authorization: Base64.strict_encode64("#{ENV['DEVELOPER_EMAIL']}:#{ENV['MATCH_PERSONAL_ACCESS_TOKEN']}"),
      app_identifier: ENV['IOS_APP_ID']
    )
        
    version = get_app_store_version_number(
      bundle_id: ENV['IOS_APP_ID']
    )
    
    increment_version_number(
      version_number: version,
      xcodeproj: "#{ENV['IOS_BUILD_PATH']}/iOS/Unity-iPhone.xcodeproj"
    )

    increment_version_number(
      bump_type: "major",
      xcodeproj: "#{ENV['IOS_BUILD_PATH']}/iOS/Unity-iPhone.xcodeproj"
    )
    
    latest_build_number = latest_testflight_build_number(
      app_identifier: ENV['IOS_APP_ID']
    )
    
    increment_build_number(
      build_number: latest_build_number + 1,
      xcodeproj: "#{ENV['IOS_BUILD_PATH']}/iOS/Unity-iPhone.xcodeproj"
    )
    
    update_code_signing_settings(
      use_automatic_signing: true,
      path: "#{ENV['IOS_BUILD_PATH']}/iOS/Unity-iPhone.xcodeproj"
    )
    
    update_code_signing_settings(
      use_automatic_signing: false,
      team_id: ENV["sigh_#{ENV['IOS_APP_ID']}_appstore_team-id"],
      code_sign_identity: 'iPhone Distribution',
      targets: 'Unity-iPhone',
      path: "#{ENV['IOS_BUILD_PATH']}/iOS/Unity-iPhone.xcodeproj",
      profile_name: ENV["sigh_#{ENV['IOS_APP_ID']}_appstore_profile-name"],
      profile_uuid: ENV["sigh_#{ENV['IOS_APP_ID']}_appstore"]
    )
    
    build_app(
      project: "#{ENV['IOS_BUILD_PATH']}/iOS/Unity-iPhone.xcodeproj",
      scheme: 'Unity-iPhone',
      xcargs: '-allowProvisioningUpdates -UseNewBuildSystem=YES'
    )
  end

  lane :cleanup_keychain do
    if File.exist?(File.expand_path("~/Library/Keychains/#{keychain_name}-db"))
      delete_keychain(name: keychain_name)
    end
  end

  after_all do
    if File.exist?(File.expand_path("~/Library/Keychains/#{keychain_name}-db"))
      delete_keychain(name: keychain_name)
    end
  end
end

org, repo = (ENV["GITHUB_REPOSITORY"]||"").split("/")
match_org, match_repo = (ENV["MATCH_REPOSITORY"]||"").split("/")

platform :ios do
  lane :init_ci do
    github_action(
      api_token: ENV["GH_PAT"],
      org: org,
      repo: repo,
      match_org: match_org,
      match_repo: match_repo,
      writable_deploy_key: true
    )
  end
end
